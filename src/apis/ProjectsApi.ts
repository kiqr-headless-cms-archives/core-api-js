/* tslint:disable */
/* eslint-disable */
/**
 * Core API
 * Core API for KIQR Headless CMS
 *
 * The version of the OpenAPI document: 0.16.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProjectRequest,
  Project,
  ProjectsCollection,
} from '../models';
import {
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectsCollectionFromJSON,
    ProjectsCollectionToJSON,
} from '../models';

export interface CreateProjectOperationRequest {
    createProjectRequest?: CreateProjectRequest;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Create a project
     * @param {CreateProjectRequest} [createProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>>;

    /**
     * Create a project
     */
    createProject(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project>;

    /**
     * 
     * @summary Projects available for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsCollection>>;

    /**
     * Projects available for the current user
     */
    getProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsCollection>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * Create a project
     */
    async createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters.createProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create a project
     */
    async createProject(requestParameters: CreateProjectOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Projects available for the current user
     */
    async getProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsCollectionFromJSON(jsonValue));
    }

    /**
     * Projects available for the current user
     */
    async getProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsCollection> {
        const response = await this.getProjectsRaw(initOverrides);
        return await response.value();
    }

}
