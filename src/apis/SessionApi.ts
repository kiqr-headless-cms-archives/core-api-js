/* tslint:disable */
/* eslint-disable */
/**
 * Core API
 * Core API for KIQR Headless CMS
 *
 * The version of the OpenAPI document: 0.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SessionInfoResponse,
} from '../models';
import {
    SessionInfoResponseFromJSON,
    SessionInfoResponseToJSON,
} from '../models';

/**
 * SessionApi - interface
 * 
 * @export
 * @interface SessionApiInterface
 */
export interface SessionApiInterface {
    /**
     * 
     * @summary Returns current user, project and environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getSessionInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionInfoResponse>>;

    /**
     * Returns current user, project and environment.
     */
    getSessionInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionInfoResponse>;

}

/**
 * 
 */
export class SessionApi extends runtime.BaseAPI implements SessionApiInterface {

    /**
     * Returns current user, project and environment.
     */
    async getSessionInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["AppId"] = this.configuration.apiKey("AppId"); // AppId authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionInfoResponseFromJSON(jsonValue));
    }

    /**
     * Returns current user, project and environment.
     */
    async getSessionInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionInfoResponse> {
        const response = await this.getSessionInfoRaw(initOverrides);
        return await response.value();
    }

}
