/* tslint:disable */
/* eslint-disable */
/**
 * Core API
 * Core API for KIQR Headless CMS
 *
 * The version of the OpenAPI document: 0.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
} from './Environment';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface SessionInfoResponse
 */
export interface SessionInfoResponse {
    /**
     * 
     * @type {Environment}
     * @memberof SessionInfoResponse
     */
    environment: Environment;
    /**
     * 
     * @type {Project}
     * @memberof SessionInfoResponse
     */
    project: Project;
    /**
     * 
     * @type {User}
     * @memberof SessionInfoResponse
     */
    user: User;
}

/**
 * Check if a given object implements the SessionInfoResponse interface.
 */
export function instanceOfSessionInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "environment" in value;
    isInstance = isInstance && "project" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function SessionInfoResponseFromJSON(json: any): SessionInfoResponse {
    return SessionInfoResponseFromJSONTyped(json, false);
}

export function SessionInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'environment': EnvironmentFromJSON(json['environment']),
        'project': ProjectFromJSON(json['project']),
        'user': UserFromJSON(json['user']),
    };
}

export function SessionInfoResponseToJSON(value?: SessionInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'environment': EnvironmentToJSON(value.environment),
        'project': ProjectToJSON(value.project),
        'user': UserToJSON(value.user),
    };
}

